# API Route Naming Conventions (Best Practices)


### JWT Authentication (provided by ninja-jwt)
- POST   /api/v1/token/pair      # Obtain JWT token pair (login)
- POST   /api/v1/token/refresh   # Refresh access token
- POST   /api/v1/token/verify    # Verify access/refresh token

### Authentication & User Management (custom endpoints)
- POST   /api/v1/auth/register         # Register a new user (returns JWT tokens)
- POST   /api/v1/auth/logout           # Stateless logout (client deletes tokens)
- DELETE /api/v1/auth/delete           # Delete authenticated user's account
- POST   /api/v1/auth/change-password  # Change password (requires old_password)

### Health
- GET    /api/v1/health                # Health check endpoint

---

# API Route Standards

- All API endpoints reference organizations, users, and contacts by their unique slug (never by integer ID).
- Example endpoints:

  GET    /api/v1/contacts/                # List all contacts (optionally filter by org slug)
  GET    /api/v1/contacts/{contact_slug}/ # Retrieve a single contact by slug
  POST   /api/v1/contacts/                # Create a contact (organization slug in payload)
  PUT    /api/v1/contacts/{contact_slug}/ # Update a contact by slug
  DELETE /api/v1/contacts/{contact_slug}/ # Delete a contact by slug

  GET    /api/v1/organizations/{org_slug}/contacts/ # List contacts for an organization

  GET    /api/v1/users/{user_slug}/      # Retrieve user by slug

- Example request payload for creating a contact:
```json
{
  "display_name": "Alice Example",
  "organization": "acme-corp",
  "creator": "bob-smith"
}
```

- Example response for retrieving a contact:
```json
{
  "display_name": "Alice Example",
  "slug": "alice-example",
  "organization": "acme-corp",
  "creator": "bob-smith",
  ...
}
```

- Numeric IDs must never be exposed in API responses or accepted in requests.

---

### Images & Polymorphic Attachments

- POST   /api/v1/images/orgs/{org_slug}/images/         # Upload a single image
- POST   /api/v1/images/orgs/{org_slug}/bulk-upload/    # Bulk upload images
- POST   /api/v1/images/orgs/{org_slug}/bulk-delete/    # Bulk delete images
- POST   /api/v1/images/orgs/{org_slug}/attach/         # Attach image polymorphically
- POST   /api/v1/images/orgs/{org_slug}/detach/         # Detach image polymorphically
- POST   /api/v1/images/orgs/{org_slug}/images/{app_label}/{model}/{obj_id}/bulk_attach/   # Bulk attach to object
- POST   /api/v1/images/orgs/{org_slug}/images/{app_label}/{model}/{obj_id}/bulk_detach/   # Bulk detach from object
- GET    /api/v1/images/orgs/{org_slug}/images/         # List all images for org
- GET    /api/v1/images/orgs/{org_slug}/images/{app_label}/{model}/{obj_id}/   # List images for object

**Conventions:**
- All endpoints use org_slug (never integer ID).
- Polymorphic attach/detach use app_label/model/object_id.
- Bulk operations always use POST and accept JSON or multipart/form-data.
- All route details and schemas are documented in rswag (OpenAPI).

---

### Organization Data Export
- POST   /api/v1/orgs/{org_slug}/export/                  # Export all org data (admin only, async, GDPR-compliant)

---

# Notes
- All custom endpoints are under /api/v1/auth/ for authentication/user actions.
- JWT endpoints are provided by ninja-jwt and mounted at /api/v1/token/.
- Registration returns access and refresh tokens on success.
- Logout is stateless; client should delete tokens.
- Delete and change-password routes require authentication (JWT access token).
- The username availability check endpoint is at `/api/v1/users/check_username` and expects the username as a query parameter (e.g., `?username=foo`).
- For Django Ninja TestClient GET requests, always include query parameters directly in the URL string (e.g., `/users/check_username?username=foo`). Do NOT use the `params=` argument, as it will not be recognized and will result in 422 errors for missing fields.
- See tests/ for full coverage of all routes and behaviors, including username availability checks and JWT flows.

**Note:**
For the most current and detailed API documentation, refer to the rswag-generated OpenAPI docs.

# End of route documentation